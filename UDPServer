using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Net.Sockets;
using System.Net;
using System.Threading;

namespace TJVictor.UDP.Server
{
    public partial class Form1 : Form
    {
        private bool threadStop;
        public delegate void RefreshUIHandle(string str);
        public RefreshUIHandle RefreshUIEvent;
        private IPAddress ipAddr;
        private Thread thread1;

        private AutoResetEvent resetEvent;

        public Form1()
        {
            InitializeComponent();
            threadStop = false;
            RefreshUIEvent += new RefreshUIHandle(RefreshUIFun);
            IPAddress[] arrIPAddresses = Dns.GetHostAddresses(Dns.GetHostName());
            foreach (IPAddress ip in arrIPAddresses)
            {
                if (ip.AddressFamily.Equals(AddressFamily.InterNetwork))
                {
                    ipAddr = ip;
                    break;
                }
            }

            resetEvent = new AutoResetEvent(false);
        }

        private void button1_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(textBox1.Text.Trim()) ||
                listBox1.SelectedIndex == -1)
                return;

            UdpClient uc = new UdpClient();
            byte[] by = System.Text.Encoding.UTF8.GetBytes(textBox1.Text.Trim());

            string str = listBox1.SelectedItem.ToString();

            uc.Send(by, by.Length, str.Split(',')[0], int.Parse(str.Split(',')[1]));
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            thread1 = new Thread(new ThreadStart(RefreshUI));
            thread1.Start();
        }

        private void RefreshUIFun(string str)
        {
            listBox1.Items.Add(str);
        }

        private void RefreshUI()
        {
            UdpClient uc = new UdpClient(8989);
            IPEndPoint RemoteIpEndPoint = new IPEndPoint(IPAddress.Any, 0);

            while (!threadStop)
            {
                try
                {
                    UdpState s = new UdpState();
                    s.U = uc;
                    s.E = RemoteIpEndPoint;

                    uc.BeginReceive(ReceiveCallback, s);
                    Console.WriteLine("WaitOne");
                    resetEvent.WaitOne();
                    Console.WriteLine("reset");
                }
                finally { }
            }
        }

        public class UdpState
        {
            public UdpClient U { get; set; }
            public IPEndPoint E { get; set; }
        }

        public void ReceiveCallback(IAsyncResult ar)
        {
            UdpClient u = (UdpClient)((UdpState)(ar.AsyncState)).U;
            IPEndPoint e = (IPEndPoint)((UdpState)(ar.AsyncState)).E;

            Byte[] receiveBytes = u.EndReceive(ar, ref e);

            if (RefreshUIEvent != null)
                this.Invoke(RefreshUIEvent, new object[] { System.Text.Encoding.UTF8.GetString(receiveBytes) });

            resetEvent.Reset();
            resetEvent.Set();
            
        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            threadStop = true;
            resetEvent.Reset();
            resetEvent.Set();
            
        }
    }
}
