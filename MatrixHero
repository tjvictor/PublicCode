/* Victor Guo --- 01/01/2015
 * 解决思路：
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 */
using System;

namespace MatrixHero
{
    class Program
    {
        static void Main(string[] args)
        {
            int n = 0, m = 0;
            int result = 0;
            int[,] pointArray;

            #region init and verify data
            string nStr = "";
            string mStr = "";
            while (true)
            {
                Console.WriteLine("please input n(0<n<=50)");
                nStr = Console.ReadLine();
                if (int.TryParse(nStr, out n))
                {
                    if (n > 0 && n <= 50)
                        break;
                }
            }
            while (true)
            {
                Console.WriteLine("please input m(0<m<=50)");
                mStr = Console.ReadLine();
                if (int.TryParse(mStr, out m))
                {
                    if (m > 0 && m <= 50)
                        break;
                }
            }
            pointArray = new int[n, m];
            Console.WriteLine("please input {0} * {1} matrix with 0 and 1.", n, m);
            int tempN = 0;
            while (tempN < n)
            {
                string inputStr = Console.ReadLine();
                char[] chars = inputStr.ToCharArray();
                bool validData = true;
                if (chars.Length != m)
                    validData = false;
                else
                {
                    foreach (char item in chars)
                    {
                        if (item != '0' && item != '1')
                        {
                            validData = false;
                            break;
                        }
                    }
                }

                if (validData)
                {
                    for (int index = 0; index < m; index++)
                        if (chars[index] == '1')
                        {
                            pointArray[tempN, index] = 1;
                        }
                    tempN++;
                }
                else
                    Console.WriteLine("invalid data, please input again.");
            }

            #endregion

            #region scan each row
            for (int row = 0; row < n; row++)
                result += ScanRow(ref pointArray, row, 0, m);
            #endregion

            #region scan each column
            for (int col = 0; col < m; col++)
                result += ScanColumn(ref pointArray, col, n);
            #endregion

            #region scan interlaced row
            for (int row = 0; row < n - 1; row++)
            {
                int yX0StartPos = GetFirstTrueValue(pointArray, row, m);
                if (yX0StartPos == -1) // handle the first row which the datas are all 0;
                {
                    continue;
                }

                int yX1StartPos = GetFirstTrueValue(pointArray, row + 1, m);
                if (yX1StartPos == -1) // handle the other rows which the datas are all 0;
                {
                    if (row + 1 == n - 1)// don't handle the last row.
                        continue;

                    if (IsEndFalseRow(pointArray, row + 1, n, m))
                        break;

                    pointArray[row + 1, yX0StartPos] = 1;
                    Print(row + 1, yX0StartPos);
                    result += 1;
                    continue;
                }

                int yX0EndPos = GetLastTrueValue(pointArray, row, m);
                int yX1EndPos = GetLastTrueValue(pointArray, row + 1, m);

                if (yX0StartPos <= yX1StartPos && yX1StartPos <= yX0EndPos)
                    continue;

                if (yX0StartPos <= yX1EndPos && yX1EndPos <= yX0EndPos)
                    continue;

                if (yX0EndPos < yX1StartPos)
                    result += ScanInterlaced(ref pointArray, row + 1, yX0EndPos, yX1StartPos);
                else if (yX1EndPos < yX0StartPos)
                    result += ScanInterlaced(ref pointArray, row + 1, yX1EndPos, yX0StartPos);
            }
            #endregion

            Console.WriteLine(result);

            Console.ReadLine();
        }

        static int ScanRow(ref int[,] pointArray, int curRow, int yPoint, int length)
        {
            int result = 0;
            int startY = yPoint;
            int endY = startY + 1;
            for (int start = yPoint; start < length; start++)
                if (pointArray[curRow, start] == 1)
                {
                    startY = start;
                    endY = startY + 1;
                    break;
                }

            for (int end = endY; end < length; end++)
                if (pointArray[curRow, end] == 1)
                    endY = end;

            if (endY - startY - 1 == 0)
                return 0;

            for (int index = startY + 1; index < endY; index++)
                if (pointArray[curRow, index] == 0)
                {
                    pointArray[curRow, index] = 1; // re - valued.
                    Print(curRow, index);
                    result++;
                }
            return result;
        }

        static int ScanColumn(ref int[,] pointArray, int curCol, int length)
        {
            int result = 0;
            int startX = 0;
            int endX = startX + 1;
            for (int start = 0; start < length; start++)
                if (pointArray[start, curCol] == 1)
                {
                    startX = start;
                    endX = startX + 1;
                    break;
                }

            for (int end = endX; end < length; end++)
                if (pointArray[end, curCol] == 1)
                    endX = end;

            if (endX - startX - 1 == 0)
                return 0;

            for (int index = startX + 1; index < endX; index++)
                if (pointArray[index, curCol] == 0)
                {
                    pointArray[index, curCol] = 1; // re - valued.
                    Print(index, curCol);
                    result++;
                }
            return result;
        }

        static int ScanInterlaced(ref int[,] pointArray, int startRow, int startCol, int endCol)
        {
            int result = 0;

            if (pointArray[startRow, startCol] == 1)
                return 0;
            else
            {
                result += 1;
                pointArray[startRow, startCol] = 1;
                Print(startRow, startCol);
            }

            if (startCol < endCol)
                result += ScanRow(ref pointArray, startRow, startCol, endCol + 1);
            else
                result += ScanRow(ref pointArray, startRow, endCol, startCol + 1);

            return result;
        }

        static int GetFirstTrueValue(int[,] pointArray, int row, int length)
        {
            for (int y = 0; y < length; y++)
                if (pointArray[row, y] == 1)
                    return y;

            return -1;
        }

        static int GetLastTrueValue(int[,] pointArray, int row, int length)
        {
            for (int y = length - 1; y >= 0; y--)
                if (pointArray[row, y] == 1)
                    return y;

            return -1;
        }

        static void Print(int x, int y)
        {
            Console.WriteLine("X{0},Y{1}", x, y);
        }

        static bool IsEndFalseRow(int[,] pointArray, int curRow, int row, int col)
        {
            for (int i = curRow; i < row; i++)
                for (int j = 0; j < col; j++)
                    if (pointArray[i, j] == 1)
                        return false;

            return true;
        }
    }
}
